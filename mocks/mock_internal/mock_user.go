// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	entity "deall-alfon/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockUserController) LoginUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserControllerMockRecorder) LoginUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserController)(nil).LoginUser), c)
}

// SignUpUser mocks base method.
func (m *MockUserController) SignUpUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUserControllerMockRecorder) SignUpUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUserController)(nil).SignUpUser), c)
}

// SignUpUserAdmin mocks base method.
func (m *MockUserController) SignUpUserAdmin(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUserAdmin", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUpUserAdmin indicates an expected call of SignUpUserAdmin.
func (mr *MockUserControllerMockRecorder) SignUpUserAdmin(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUserAdmin", reflect.TypeOf((*MockUserController)(nil).SignUpUserAdmin), c)
}

// MockUserFacade is a mock of UserFacade interface.
type MockUserFacade struct {
	ctrl     *gomock.Controller
	recorder *MockUserFacadeMockRecorder
}

// MockUserFacadeMockRecorder is the mock recorder for MockUserFacade.
type MockUserFacadeMockRecorder struct {
	mock *MockUserFacade
}

// NewMockUserFacade creates a new mock instance.
func NewMockUserFacade(ctrl *gomock.Controller) *MockUserFacade {
	mock := &MockUserFacade{ctrl: ctrl}
	mock.recorder = &MockUserFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFacade) EXPECT() *MockUserFacadeMockRecorder {
	return m.recorder
}

// SignUpUser mocks base method.
func (m *MockUserFacade) SignUpUser(ctx context.Context, user entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUserFacadeMockRecorder) SignUpUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUserFacade)(nil).SignUpUser), ctx, user)
}

// SignUpUserAdmin mocks base method.
func (m *MockUserFacade) SignUpUserAdmin(ctx context.Context, user entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUserAdmin", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUserAdmin indicates an expected call of SignUpUserAdmin.
func (mr *MockUserFacadeMockRecorder) SignUpUserAdmin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUserAdmin", reflect.TypeOf((*MockUserFacade)(nil).SignUpUserAdmin), ctx, user)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// MockUserDB is a mock of UserDB interface.
type MockUserDB struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBMockRecorder
}

// MockUserDBMockRecorder is the mock recorder for MockUserDB.
type MockUserDBMockRecorder struct {
	mock *MockUserDB
}

// NewMockUserDB creates a new mock instance.
func NewMockUserDB(ctrl *gomock.Controller) *MockUserDB {
	mock := &MockUserDB{ctrl: ctrl}
	mock.recorder = &MockUserDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDB) EXPECT() *MockUserDBMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockUserDB) GetUserByEmail(ctx context.Context) entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx)
	ret0, _ := ret[0].(entity.User)
	return ret0
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserDBMockRecorder) GetUserByEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserDB)(nil).GetUserByEmail), ctx)
}
