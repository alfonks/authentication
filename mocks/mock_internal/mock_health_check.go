// Code generated by MockGen. DO NOT EDIT.
// Source: healthcheck.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
)

// MockHealthCheckController is a mock of HealthCheckController interface.
type MockHealthCheckController struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckControllerMockRecorder
}

// MockHealthCheckControllerMockRecorder is the mock recorder for MockHealthCheckController.
type MockHealthCheckControllerMockRecorder struct {
	mock *MockHealthCheckController
}

// NewMockHealthCheckController creates a new mock instance.
func NewMockHealthCheckController(ctrl *gomock.Controller) *MockHealthCheckController {
	mock := &MockHealthCheckController{ctrl: ctrl}
	mock.recorder = &MockHealthCheckControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckController) EXPECT() *MockHealthCheckControllerMockRecorder {
	return m.recorder
}

// StatusHealthCheck mocks base method.
func (m *MockHealthCheckController) StatusHealthCheck(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusHealthCheck", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusHealthCheck indicates an expected call of StatusHealthCheck.
func (mr *MockHealthCheckControllerMockRecorder) StatusHealthCheck(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHealthCheck", reflect.TypeOf((*MockHealthCheckController)(nil).StatusHealthCheck), c)
}
